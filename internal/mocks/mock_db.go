// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/basedalex/merch-shop/internal/db"
	api "github.com/basedalex/merch-shop/internal/swagger"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockRepository) Authenticate(ctx context.Context, authRequest api.AuthRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, authRequest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockRepositoryMockRecorder) Authenticate(ctx, authRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockRepository)(nil).Authenticate), ctx, authRequest)
}

// BuyItem mocks base method.
func (m *MockRepository) BuyItem(ctx context.Context, employeeName, item string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, employeeName, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockRepositoryMockRecorder) BuyItem(ctx, employeeName, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockRepository)(nil).BuyItem), ctx, employeeName, item)
}

// CreateEmployee mocks base method.
func (m *MockRepository) CreateEmployee(ctx context.Context, authRequest api.AuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", ctx, authRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockRepositoryMockRecorder) CreateEmployee(ctx, authRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockRepository)(nil).CreateEmployee), ctx, authRequest)
}

// GetEmployeeInfo mocks base method.
func (m *MockRepository) GetEmployeeInfo(ctx context.Context, employeeName string) (*db.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeInfo", ctx, employeeName)
	ret0, _ := ret[0].(*db.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeInfo indicates an expected call of GetEmployeeInfo.
func (mr *MockRepositoryMockRecorder) GetEmployeeInfo(ctx, employeeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeInfo", reflect.TypeOf((*MockRepository)(nil).GetEmployeeInfo), ctx, employeeName)
}

// TransferCoins mocks base method.
func (m *MockRepository) TransferCoins(ctx context.Context, senderName, receiverName string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferCoins", ctx, senderName, receiverName, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferCoins indicates an expected call of TransferCoins.
func (mr *MockRepositoryMockRecorder) TransferCoins(ctx, senderName, receiverName, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCoins", reflect.TypeOf((*MockRepository)(nil).TransferCoins), ctx, senderName, receiverName, amount)
}
